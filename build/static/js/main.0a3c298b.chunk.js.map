{"version":3,"sources":["components/userState.js","components/globalState.js","components/ChatMessage.js","components/Chat.js","components/convoState.js","components/SignIn.js","components/SignOut.js","components/SideBar.js","App.js","app/store.js","index.js"],"names":["slice","createSlice","name","initialState","value","reducers","setUserID","state","action","payload","actions","selectUser","userID","setConversation","selectCount","conversation","ChatMessage","props","message","messageClass","sender","auth","currentUser","uid","className","Chat","firestore","dummy","useRef","useState","userConversations","setUserConversations","index","setIndex","formValue","setFormValue","blocked","setBlocked","user","useSelector","convo","useEffect","unsubscribe","collection","doc","onSnapshot","snapshot","data","conversations","forEach","users","findIndex","con","blockUser","a","update","sendMessage","e","preventDefault","currentdate","Date","block","get","otherUserConversation","indexOf","messages","push","time","getDate","getMonth","getFullYear","getHours","getMinutes","photoURL","displayName","current","scrollIntoView","behavior","onClick","map","msg","uuidv4","ref","onSubmit","onChange","target","placeholder","type","disabled","src","setConvoName","selectConvoName","convoName","SignIn","dispatch","useDispatch","userRef","useCollectionData","idField","addUser","email","add","username","names","emails","exists","provider","firebase","GoogleAuthProvider","signInWithPopup","then","success","catch","error","console","log","SignOut","signOut","SideBar","userData","setUserData","userList","setUserList","searchValue","setSearchValue","searchUsers","id","length","docs","newValue","onRequestSearch","Object","keys","substring","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","App","useAuthState","setName","selector","configureStore","reducer","globalState","userState","convoState","ReactDOM","render","store","document","getElementById"],"mappings":"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","file":"static/js/main.0a3c298b.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n//Global state for the user's document id\nexport const slice = createSlice({\n  name: \"userID\",\n  initialState: {\n    value: \"\",\n  },\n  reducers: {\n    setUserID: (state, action) => {\n      state.value = action.payload;\n    },\n  },\n});\n\nexport const { setUserID } = slice.actions;\n\nexport const selectUser = (state) => state.userID.value;\n\nexport default slice.reducer;\n","import { createSlice } from \"@reduxjs/toolkit\";\n//The conversation index number\nexport const slice = createSlice({\n  name: \"conversation\",\n  initialState: {\n    value: \"\",\n  },\n  reducers: {\n    setConversation: (state, action) => {\n      state.value = action.payload;\n    },\n  },\n});\n\nexport const { setConversation } = slice.actions;\n\nexport const selectCount = (state) => state.conversation.value;\n\nexport default slice.reducer;\n","import React from \"react\";\nimport firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport \"firebase/auth\";\nimport \"firebase/analytics\";\nimport \"../App.scss\";\nconst ChatMessage = (props) => {\n  const { message } = props;\n\n  const messageClass =\n    message.sender === props.auth.currentUser.uid ? \"outgoing\" : \"incoming\";\n\n  return (\n    <>\n      <div className={`${messageClass}`}>\n        <div className=\"bubble\">{message.message}</div>\n      </div>\n    </>\n  );\n};\n\nexport default ChatMessage;\n","import React, { useRef, useState, useEffect } from \"react\";\nimport \"firebase/database\";\nimport { selectUser } from \"./userState\";\nimport { selectCount } from \"./globalState\";\nimport { useSelector } from \"react-redux\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport ChatMessage from \"./ChatMessage\";\nimport \"../App.scss\";\nconst Chat = ({ firestore, auth }) => {\n  const dummy = useRef();\n  const [userConversations, setUserConversations] = useState([]);\n  const [index, setIndex] = useState(0);\n  const [formValue, setFormValue] = useState(\"\");\n  const [blocked, setBlocked] = useState(\"false\");\n  const user = useSelector(selectUser);\n  const convo = useSelector(selectCount);\n\n  useEffect(() => {\n    if (user !== \"\") {\n      //Create listener for chat updates\n      const unsubscribe = firestore\n        .collection(\"users\")\n        .doc(user)\n        .onSnapshot((snapshot) => {\n          setUserConversations(snapshot.data().conversations);\n        });\n      //if the global state isn't empty, load this conversation, else, load first conversation.\n      if (convo !== \"\") {\n        userConversations.forEach((conversation) => {\n          if (conversation.users[1] === convo) {\n            setIndex(\n              userConversations.findIndex((con) => con.users[1] === convo)\n            );\n            setBlocked(conversation.blocked);\n          }\n        });\n      }\n      return () => unsubscribe();\n    }\n  }, [user, convo]); //only run when the user is loaded, or when the conversation changes\n  const blockUser = async () => {\n    if (userConversations[index].blocked === \"false\") {\n      userConversations[index].blocked = \"true\";\n    } else {\n      userConversations[index].blocked = \"false\";\n    }\n    setBlocked(userConversations[index].blocked);\n    await firestore.collection(\"users\").doc(user).update({\n      conversations: userConversations,\n    });\n  };\n  const sendMessage = async (e) => {\n    e.preventDefault();\n    const currentdate = new Date();\n    let block = \"false\";\n    //Add feature to check if the conversation is blocked\n    if (userConversations[index].users[1] !== \"chatappclient\") {\n      let otherUserConversation = await firestore\n        .collection(\"users\")\n        .doc(userConversations[index].userID[1])\n        .get();\n      otherUserConversation = otherUserConversation.data().conversations;\n      otherUserConversation.forEach((conversation) => {\n        if (conversation.users[1] === auth.currentUser.uid) {\n          block = conversation.blocked;\n          otherUserConversation[\n            otherUserConversation.indexOf(conversation)\n          ].messages.push({\n            message: formValue,\n            sender: auth.currentUser.uid,\n            time:\n              currentdate.getDate() +\n              \"/\" +\n              (currentdate.getMonth() + 1) +\n              \"/\" +\n              currentdate.getFullYear() +\n              \" @ \" +\n              currentdate.getHours() +\n              \":\" +\n              currentdate.getMinutes(),\n          });\n        }\n      });\n      if (block !== \"true\") {\n        await firestore\n          .collection(\"users\")\n          .doc(userConversations[index].userID[1])\n          .update({\n            conversations: otherUserConversation,\n          });\n      }\n    }\n    userConversations[index].messages.push({\n      message: formValue,\n      sender: auth.currentUser.uid,\n      time:\n        currentdate.getDate() +\n        \"/\" +\n        (currentdate.getMonth() + 1) +\n        \"/\" +\n        currentdate.getFullYear() +\n        \" @ \" +\n        currentdate.getHours() +\n        \":\" +\n        currentdate.getMinutes(),\n    });\n\n    const { uid, photoURL, displayName } = auth.currentUser;\n    if (!userConversations.blocked) {\n      await firestore.collection(\"users\").doc(user).update({\n        conversations: userConversations,\n      });\n    }\n    setFormValue(\"\");\n    dummy.current.scrollIntoView({ behavior: \"smooth\" });\n  };\n  return (\n    <>\n      <button className=\"block\" onClick={blockUser}>\n        {blocked === \"true\" ? \"Unblock\" : \"Block\"}\n      </button>\n      <main className=\"middle\">\n        {userConversations[index] &&\n          userConversations[index].messages.map((msg) => (\n            <ChatMessage\n              key={uuidv4()}\n              message={msg}\n              auth={auth}\n              name={auth.currentUser.displayName}\n            />\n          ))}\n\n        <span ref={dummy}></span>\n      </main>\n      <div className=\"bottom-bar\">\n        <div>\n          <form onSubmit={sendMessage}>\n            <div className=\"chat\">\n              <input\n                value={formValue}\n                onChange={(e) => setFormValue(e.target.value)}\n                placeholder=\"Be kind\"\n              />\n              <button className=\"send_btn\" type=\"submit\" disabled={!formValue}>\n                <img src=\"https://img.icons8.com/color/24/000000/filled-sent.png\" />\n              </button>\n            </div>\n          </form>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default Chat;\n","import { createSlice } from \"@reduxjs/toolkit\";\n//Global state for the name of the person the user is currently having a conversation with\nexport const slice = createSlice({\n  name: \"convoName\",\n  initialState: {\n    value: \"Chat App\",\n  },\n  reducers: {\n    setConvoName: (state, action) => {\n      state.value = action.payload;\n    },\n  },\n});\n\nexport const { setConvoName } = slice.actions;\n\nexport const selectConvoName = (state) => state.convoName.value;\n\nexport default slice.reducer;\n","import React from \"react\";\nimport firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport \"firebase/analytics\";\nimport \"../App.scss\";\nimport { useDispatch } from \"react-redux\";\nimport { setConvoName } from \"./convoState\";\nimport { useCollectionData } from \"react-firebase-hooks/firestore\";\n\nconst SignIn = ({ auth, firestore }) => {\n  const dispatch = useDispatch();\n  const userRef = firestore.collection(\"users\");\n  const [users] = useCollectionData(userRef, { idField: \"id\" });\n\n  const signInWithGoogle = () => {\n    const exists = false;\n    const provider = new firebase.auth.GoogleAuthProvider();\n    auth\n      .signInWithPopup(provider)\n      .then((success) => {\n        users.forEach((user) => {\n          if (user.uid === auth.currentUser.uid) {\n            exists = true;\n          }\n        });\n        //Don't create a new user if that user already exists\n        if (!exists) addUser(auth.currentUser);\n      })\n      .catch(function (error) {\n        console.log(error.message);\n        console.log(\"You are not logged in!\");\n      });\n    //Set convo title to the default\n    dispatch(setConvoName(\"Chat App\"));\n  };\n  const addUser = async (user) => {\n    const { uid, email, displayName } = user;\n    const currentdate = new Date();\n    //Create a conversation with the client\n    await userRef.add({\n      uid: uid,\n      email: email,\n      username: displayName,\n      conversations: [\n        {\n          users: [uid, \"chatappclient\"],\n          names: [displayName, \"Chat App\"],\n          emails: [email, \"chatappclient@example.com\"],\n          blocked: \"false\",\n          messages: [\n            {\n              message: \"Welcome to the chat app\",\n              sender: \"chatappclient\",\n              time:\n                currentdate.getDate() +\n                \"/\" +\n                (currentdate.getMonth() + 1) +\n                \"/\" +\n                currentdate.getFullYear() +\n                \" @ \" +\n                currentdate.getHours() +\n                \":\" +\n                currentdate.getMinutes(),\n            },\n            {\n              message:\n                \"To start a new chat, search for the email of another user\",\n              sender: \"chatappclient\",\n              time:\n                currentdate.getDate() +\n                \"/\" +\n                (currentdate.getMonth() + 1) +\n                \"/\" +\n                currentdate.getFullYear() +\n                \" @ \" +\n                currentdate.getHours() +\n                \":\" +\n                currentdate.getMinutes(),\n            },\n          ],\n        },\n      ],\n    });\n  };\n  return (\n    <>\n      <button className=\"sign-in\" onClick={signInWithGoogle}>\n        Sign in with Google\n      </button>\n    </>\n  );\n};\n\nexport default SignIn;\n","import React from \"react\";\nimport \"../App.scss\";\nconst SignOut = ({ auth }) => {\n  return (\n    auth.currentUser && <button onClick={() => auth.signOut()}>Sign Out</button>\n  );\n};\n\nexport default SignOut;\n","import React, { useState, useEffect } from \"react\";\nimport \"firebase/firestore\";\nimport \"firebase/analytics\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { setConversation } from \"./globalState\";\nimport { setUserID } from \"./userState\";\nimport \"../App.scss\";\nimport SearchBar from \"material-ui-search-bar\";\nimport { selectUser } from \"./userState\";\nimport { setConvoName } from \"./convoState\";\n\nconst SideBar = ({ auth, firestore }) => {\n  const [userData, setUserData] = useState({});\n  const [userList, setUserList] = useState([]);\n  const [searchValue, setSearchValue] = useState(\"\");\n  const dispatch = useDispatch();\n  const userID = useSelector(selectUser);\n\n  const searchUsers = async (value) => {\n    //Make sure the user isn't searching for themself, if not, run through all users, if the user's email exists\n    //create a conversation.\n    if (value !== userData.email) {\n      let exists = false;\n      userData.conversations.forEach((conversation) => {\n        if (conversation.emails[1] === value) {\n          exists = true;\n        }\n      });\n      if (!exists) {\n        userList.forEach(async (user) => {\n          // Make sure they don't already have a conversation with this user, if they do, open it\n          if (user.email === value) {\n            const currentdate = new Date();\n            userData.conversations.push({\n              userID: [userData.id, user.id],\n              users: [userData.uid, user.uid],\n              names: [userData.username, user.username],\n              blocked: \"false\",\n              emails: [userData.email, user.email],\n              messages: [\n                {\n                  message:\n                    \"This is the beginning of your conversation with \" +\n                    user.username,\n                  sender: \"chatappclient\",\n                  time:\n                    currentdate.getDate() +\n                    \"/\" +\n                    (currentdate.getMonth() + 1) +\n                    \"/\" +\n                    currentdate.getFullYear() +\n                    \" @ \" +\n                    currentdate.getHours() +\n                    \":\" +\n                    currentdate.getMinutes(),\n                },\n              ],\n            });\n\n            user.conversations.push({\n              userID: [user.id, userData.id],\n              users: [user.uid, userData.uid],\n              names: [user.username, userData.username],\n              blocked: \"false\",\n              email: [user.email, userData.email],\n              messages: [\n                {\n                  message:\n                    \"This is the beginning of your conversation with \" +\n                    userData.username,\n                  sender: \"chatappclient\",\n                  time:\n                    currentdate.getDate() +\n                    \"/\" +\n                    (currentdate.getMonth() + 1) +\n                    \"/\" +\n                    currentdate.getFullYear() +\n                    \" @ \" +\n                    currentdate.getHours() +\n                    \":\" +\n                    currentdate.getMinutes(),\n                },\n              ],\n            });\n            await firestore.collection(\"users\").doc(userID).update({\n              conversations: userData.conversations,\n            });\n            await firestore.collection(\"users\").doc(user.id).update({\n              conversations: user.conversations,\n            });\n            //add conversation\n          }\n        });\n      }\n    }\n  };\n  useEffect(() => {\n    if (userList.length > 0) {\n      return; // we already have data, so no need to run this again\n    }\n    //Listen for changes, and fill the side bar with updated data.\n    const unsubscribe = firestore.collection(\"users\").onSnapshot((snapshot) => {\n      const userList = snapshot.docs.map((doc) => ({\n        uid: doc.data().uid,\n        username: doc.data().username,\n        conversations: doc.data().conversations,\n        email: doc.data().email,\n        id: doc.id,\n      }));\n      setUserList(userList);\n      userList.forEach((user) => {\n        if (user.uid === auth.currentUser.uid) {\n          dispatch(setUserID(user.id));\n          setUserData(user);\n        }\n      });\n    });\n    return () => {\n      unsubscribe();\n    };\n  }, []);\n\n  return (\n    <div className=\"messages\">\n      <SearchBar\n        className=\"search\"\n        value={searchValue}\n        onChange={(newValue) => setSearchValue(newValue)}\n        onRequestSearch={() => {\n          searchUsers(searchValue);\n          setSearchValue(\"\");\n        }}\n      />\n      <ul className=\"people\">\n        {!(Object.keys(userData).length === 0) ? (\n          userData.conversations.map((conversation) => {\n            return (\n              //List each conversation on the search bar\n              <li\n                key={conversation.users[1]}\n                className=\"person\"\n                onClick={() => {\n                  dispatch(setConversation(conversation.users[1]));\n                  dispatch(setConvoName(conversation.names[1]));\n                }}\n              >\n                <span className=\"title\">{conversation.names[1]}</span> <br />\n                <span className=\"preview\">\n                  {conversation.messages[\n                    conversation.messages.length - 1\n                  ].message.substring(0, 24)}\n                  ...\n                </span>\n                <br />\n                <span className=\"time\">\n                  {conversation.messages[conversation.messages.length - 1].time}\n                </span>{\" \"}\n              </li>\n            );\n          })\n        ) : (\n          <div>loading...</div>\n        )}\n      </ul>\n    </div>\n  );\n};\n\nexport default SideBar;\n","import \"./App.scss\";\nimport React, { useState, useEffect } from \"react\";\nimport firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport \"firebase/auth\";\nimport Chat from \"./components/Chat\";\nimport SignIn from \"./components/SignIn\";\nimport SignOut from \"./components/SignOut\";\nimport SideBar from \"./components/SideBar\";\nimport { useSelector } from \"react-redux\";\nimport { useAuthState } from \"react-firebase-hooks/auth\";\nimport { selectConvoName } from \"./components/convoState\";\n\nfirebase.initializeApp({\n  apiKey: \"AIzaSyBQ4lnhpOV4T1U7IkAHMLagH47sLRKcDuE\",\n  authDomain: \"chat-app-467eb.firebaseapp.com\",\n  projectId: \"chat-app-467eb\",\n  storageBucket: \"chat-app-467eb.appspot.com\",\n  messagingSenderId: \"184429127568\",\n  appId: \"1:184429127568:web:86eda818bdce20e72d7515\",\n  measurementId: \"G-952KS2QW9T\",\n});\n\nconst auth = firebase.auth();\nconst firestore = firebase.firestore();\n\nfunction App() {\n  const [user] = useAuthState(auth);\n  const [name, setName] = useState(\"\");\n  const selector = useSelector(selectConvoName);\n  //Check if the conversation has changed, and update the name\n  useEffect(() => {\n    setName(selector);\n  });\n  return (\n    <div className=\"container\">\n      <header className=\"top-bar\">\n        <h1 className=\"head\">{name}</h1>\n        <SignOut auth={auth} />\n      </header>\n\n      <section className=\"\">\n        {user ? (\n          <Chat auth={auth} firestore={firestore} />\n        ) : (\n          <SignIn auth={auth} firestore={firestore} />\n        )}\n      </section>\n      {user ? <SideBar auth={auth} firestore={firestore} /> : <div></div>}\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport globalState from \"../components/globalState\";\nimport userState from \"../components/userState\";\nimport convoState from \"../components/convoState\";\nexport default configureStore({\n  reducer: {\n    conversation: globalState,\n    userID: userState,\n    convoName: convoState,\n  },\n});\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { Provider } from \"react-redux\";\nimport store from \"./app/store\";\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}